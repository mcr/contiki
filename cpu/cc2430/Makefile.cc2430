### Compiler definitions
CC       = sdcc
LD       = sdcc
AS       = sdcc
AR	   = sdcclib
OBJCOPY  = objcopy
STRIP    = strip

CFLAGS  += --std-c99 --stack-auto -DSDCC_CC2430 
LDFLAGS += --stack-auto -DSDCC_CC2430 --out-fmt-ihx
ASFLAGS += -plosgff
ifdef $(MEMORY_MODEL)
CFLAGS += $(MEMORY_MODEL)
LDFLAGS += $(MEMORY_MODEL)
else 
CFLAGS += --model-large
LDFLAGS += --model-large
endif
LDFLAGS += --xram-loc 57344 --xram-size 8192
##LDFLAGS += --verbose
##LDFLAGS += -V
AROPTS   = -a
ifeq ($(HAVE_BANKING),1)
#banking
LDFLAGS += --code-size 0x20000 
LDFLAGS += -Wl-bCSEG=0x000000 
LDFLAGS += -Wl-bBANK1=0x018000
LDFLAGS += -Wl-bBANK2=0x028000 
LDFLAGS += -Wl-bBANK3=0x038000
#relocated code (for bank switching )
LDFLAGS += -Wl-r
CFLAGS += -DHAVE_SDCC_BANKING
#use this in $(call code_segment,$<) to get segment for a source file.
code_segment = --codeseg $(word 1,$(shell cat ${OBJECTDIR}/segment.rules | perl ${CONTIKI_CPU}/segment.rules.pl $1 ) CSEG )
FINAL_TARGET = %_linear.hex
#bank switching file conversion 
%_linear.hex: %.ihx
	$(CONTIKI)/cpu/cc2430/converter/converter -f $< $@

%.$(TARGET): %_linear.hex
	cp ${@:.${TARGET}=_linear.hex} $@
	egrep '(^BANK.[^=])|(^CSEG )|(^HOME  )|(^CONST)|(^XINIT)' ${@:.${TARGET}=.map} | uniq
else
#no banking
LDFLAGS += --code-loc 0000 --code-size 65500
code_segment =
%.$(TARGET): %.ihx
	cp ${@:.${TARGET}=.ihx} $@
	egrep '(^BANK.[^=])|(^CSEG )|(^HOME  )|(^CONST)|(^XINIT)' ${@:.${TARGET}=.map} | uniq
endif 

### CPU-dependent cleanup files
CLEAN += *.lnk *.sym *.lib *.ihx *.rel *.mem *.rst *.asm *_linear.hex

### CPU-dependent directories
CONTIKI_CPU_DIRS = . dev

### CPU-dependent source files
CONTIKI_SOURCEFILES += bus.c clock.c uart.c cc2430_rf.c dma.c
CONTIKI_SOURCEFILES += uart_init.c uart_intr.c cc2430_rf_intr.c dma_intr.c adc.c watchdog.c
CONTIKI_ASMFILES +=

CONTIKI_ASMOBJECTFILES = ${addprefix $(OBJECTDIR)/,$(CONTIKI_ASMFILES:.S=.rel)}

CONTIKI_CASMOBJECTFILES = ${addprefix $(OBJECTDIR)/,$(CONTIKI_CASMFILES:.cS=.rel)}

CONTIKI_PLATFORM_DIRS = $(PLATFORM_APPDIRS) \
	 ${addprefix $(CONTIKI)/platform/$(TARGET)/, $(CONTIKI_TARGET_DIRS)}

CONTIKI_CPU_DIRS_LIST    = ${addprefix $(CONTIKI_CPU)/, \
                               $(CONTIKI_CPU_DIRS)}

oname = ${patsubst %.c,%.rel,${patsubst %.S,%.rel,$(1)}}

CONTIKI_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(CONTIKI_SOURCEFILES)}}

PROJECT_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(PROJECT_SOURCEFILES)}}

### Compilation rules


SEGMENT_RULE_FILES = ${foreach dir, ${CONTIKI_PLATFORM_DIRS} ${CONTIKI_CPU_DIRS_LIST}, ${wildcard $(dir)/segment.rules} } 
${OBJECTDIR}/segment.rules: ${SEGMENT_RULE_FILES}
	echo ${SEGMENT_RULE_FILES}
	cat ${SEGMENT_RULE_FILES} > $@

CUSTOM_RULE_LINK=1
CUSTOM_RULE_C_TO_OBJECTDIR_O=1
CUSTOM_RULE_ALLOBJS_TO_TARGETLIB=1

ifdef CUSTOM_RULE_C_TO_OBJECTDIR_O
ifeq ($(HAVE_BANKING),1)
$(OBJECTDIR)/%.rel: %.c ${OBJECTDIR}/segment.rules
	@echo "Compile:"$<" to segment " $(call code_segment,$<)
	$(CC) $(CFLAGS) -MM -c $< > $(@:.rel=.d)
	echo -n ${OBJECTDIR}/ >  $(@:.rel=.$$$$); \
	cat $(@:.rel=.d) >> $(@:.rel=.$$$$); \
	cp $(@:.rel=.$$$$) $(@:.rel=.d); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(@:.rel=.$$$$) >> $(@:.rel=.d); \
	echo rm -f $(@:.rel=.$$$$)
	$(CC) $(call code_segment,$<) $(CFLAGS) -c $< -o $@
else
$(OBJECTDIR)/%.rel: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(CC) $(CFLAGS) -MM -c $< > $(@:.rel=.d)
endif
endif


ifdef CUSTOM_RULE_CS_TO_OBJECTDIR_O
$(OBJECTDIR)/%.rel: %.cS
	cp $< $(OBJECTDIR)/$*.c
	$(CC) $(CFLAGS) -E $(OBJECTDIR)/$*.c > $(OBJECTDIR)/tmp
	perl -pe "s/^#(.*)/;$$1/" $(OBJECTDIR)/tmp > $(OBJECTDIR)/$*.S
	$(AS) $(ASFLAGS) -o $@ $(OBJECTDIR)/$*.S
	rm -f $(OBJECTDIR)/tmp
endif

#CUSTOM_RULE_ALLOBJS_TO_TARGETLIB
contiki-$(TARGET).lib: $(CONTIKI_OBJECTFILES) $(PROJECT_OBJECTFILES) $(CONTIKI_ASMOBJECTFILES) $(CONTIKI_CASMOBJECTFILES)
	rm -f $@
	for target in $^; do echo $$target >> $@; done

.PRECIOUS: %.$(TARGET)
.PRECIOUS: %.ihx %.rel %_linear.hex %.ihex

#build app/example local object files 
%.rel: %.c
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@

%.ihex: %.ihx
# .ihx is the sdcc binary output file
%.ihx: %.rel $(CONTIKI_TARGET_MAIN) contiki-$(TARGET).lib
	$(CC) $(LDFLAGS) -o $@ $(CONTIKI_TARGET_MAIN) $*.rel -llibsdcc.lib -lcontiki-$(TARGET).lib

